[Getting Started]

const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);

is identical to this...

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);

react uses camel case to name properties, so attributes
such as class become className as seen above

_______________________________________________________

[Rendering Elements]

In a pure React app there will usually be a single root node
that you render to. When you integrate you can have many
isolated root nodes.

Here is an example of rendering...

ReactDOM.render(
  element,
  document.getElementById('root')
);

React elements are immutable, once created they can not
change. With what I currently know, the way to update
the UI is to create a new element and replace whatever
element was there.

see the example react_update.html for how this works.

Note that in the example the {} braces allow for some
javascript to be evaluated.

The cool thing about react_update.html, and react generally
is that react can determine what needs to be updated in the
DOM each time and ONLY update that. In the example there is
a new element being created each time, but it only needs to
update the time and, because it's react, will only do that.
_______________________________________________________

[Components and Props]

When I think of react, I think of how you can apply OOP
principles to front end coding by breaking things into
reusable parts. That is where components come into the
picture.

Components are similar to JS functions, tehy accept
some arbitrary input that is apparently called "props"
and then return React elements describing what should
appear on the screen.

The function below and the ES6 class below that are
considered equivalent in terms of React

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}

Both return react elements using a props argument
The class has some additional features, but that will
come later

In addition to DOM tags, it's possible to use user defined
defined components. When React sees an element representing
a user defined component it passes JSX attributes to this
componenet as a single object called 'props'

basic_user_components.html is an example showing how props
can be used with user defined components to create a react
element with a function call

1. We call ReactDOM.render() with the <Welcome name="Sara" /> element.
2. React calls the Welcome component with {name: 'Sara'} as the props. //dat JSON
3. Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
4. React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>.

---------
IMPORTANT
---------
Always start component names with a capital letter. For example, <div />
represents a DOM tag, but <Welcome /> represents a component and requires
Welcome to be in scope.


Similar to object oriented programming, dividing up complicated things is often
a good idea with components.

Extracting components might seem like grunt work at first, but having a
palette of reusable components pays off in larger apps. A good rule of
thumb is that if a part of your UI is used several times (Button, Panel, Avatar),
or is complex enough on its own (App, FeedStory, Comment), it is a good candidate
to be a reusable component. I didnt' include the code for the references in parens
above, but it's easy enough to grasp I think.

[One Last Rule With Props]

Whether you declare a component as a function or a class, it must never modify its
own props. Consider this sum function:

function sum(a, b) {
  return a + b;
}

Such functions are called "pure" because they do not attempt to change their inputs,
and always return the same result for the same inputs. In contrast, this function is
impure because it changes its own input:

function withdraw(account, amount) {
  account.total -= amount;
}

React is pretty flexible but it has a single strict rule:
All React components must act like pure functions with respect to their props.

________________________________________________________

[State and Lifecycle]

So far the only way to update the DOM has been with ReactDOM.render()
The example used earlier was a clock that would update and call the
above function. This time the component will be written to be encapsulated
in itself and have it's own rendering function.

Earlier it was mentioned that ES6 classes have additional properties that
functions do not. In particular 'state' is an extra that comes with classes.
State is similar to props but it is private and fully controlled by the
component.

--------------------------------
Converting a Function to a Class
--------------------------------

A simple five step process to convert a function component to a class is...

	1. Create an ES6 class with the same name that extends React.Component
	2. Add a single empty method to it called render()
	3. Move the body of the function into the render() method
	4. Replace 'props' with 'this.props' in the render() method
	5. Delete the remaining empty function declaration

-----------------------------
Adding Local State to a Class
-----------------------------

**read this**
When calling ReactDOM.render()...

  React.createElement(Clock)

is equivalent to

  <Clock />

The latter seems to be more in line with the React paradigm though
